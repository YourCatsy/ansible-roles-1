---
- name: Setup Web and Database Servers
  hosts: all
  become: true
  vars:
    app_name: laravel_app
    app_user: www-data
    app_group: www-data
    app_repo: "https://github.com/Practical-DevOps/app-for-devops"
    app_directory: /var/www/{{ app_name }}
    apache_conf: "/etc/apache2/sites-available/{{ app_name }}.conf"

  roles:
    - { role: server, when: "'server' in group_names" }
    - { role: db, when: "'db' in group_names" }

# Server role (roles/server/tasks/main.yml)
- name: Server Role Tasks
  hosts: server
  become: true
  tasks:
    - name: Install Apache and PHP
      apt:
        name: 
          - apache2
          - libapache2-mod-php
          - php
          - php-pgsql
        state: present
        update_cache: yes

    - name: Clone application repository
      git:
        repo: "{{ app_repo }}"
        dest: "{{ app_directory }}"
        update: yes

    - name: Set permissions for application
      file:
        path: "{{ app_directory }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        state: directory
        recurse: yes

    - name: Configure Apache virtual host
      template:
        src: apache.j2
        dest: "{{ apache_conf }}"
      notify: Restart Apache

    - name: Enable site and disable default
      command: a2ensite "{{ app_name }}.conf"
      notify: Restart Apache

    - name: Ensure default site is disabled
      command: a2dissite 000-default.conf
      notify: Restart Apache

    - name: Ensure Apache is running
      service:
        name: apache2
        state: started
        enabled: yes

  handlers:
    - name: Restart Apache
      service:
        name: apache2
        state: restarted

# DB role (roles/db/tasks/main.yml)
- name: DB Role Tasks
  hosts: db
  become: true
  tasks:
    - name: Install PostgreSQL
      apt:
        name: 
          - postgresql
        state: present
        update_cache: yes

    - name: Ensure PostgreSQL is running
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Create database and user
      postgresql_db:
        name: "{{ db_name }}"
        state: present

    - name: Create database user
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_pass }}"
        priv: "{{ db_name }}:ALL"

    - name: Allow remote connections to PostgreSQL
      lineinfile:
        path: /etc/postgresql/12/main/pg_hba.conf
        line: "host    all             all             0.0.0.0/0            md5"
        state: present

    - name: Configure PostgreSQL to listen on all interfaces
      lineinfile:
        path: /etc/postgresql/12/main/postgresql.conf
        regexp: "^#?listen_addresses"
        line: "listen_addresses = '*'"
      notify: Restart PostgreSQL

  handlers:
    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
